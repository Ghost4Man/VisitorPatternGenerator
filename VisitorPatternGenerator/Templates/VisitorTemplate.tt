<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
// <auto-generated/>

<# if(!AcceptorInterface.ContainingNamespace.IsGlobalNamespace) { #>
namespace <#= AcceptorInterface.ContainingNamespace.ToDisplayString() #>
{
<# PushIndent("    "); } #>
partial interface <#= AcceptorInterface.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat.WithGenericsOptions(SymbolDisplayGenericsOptions.IncludeTypeParameters | SymbolDisplayGenericsOptions.IncludeVariance)) #>
{
    <#= GetReturnType(BaseResultType) #> Accept<#= IfAsync("Async") #><#= GetTypeParamStr() #>(<#= VisitorInterface.ToDisplayString() #> visitor<#= GetTypeArgListStr() #>)<#= GetTypeConstraintList() #>;
}
<# if(!AcceptorInterface.ContainingNamespace.IsGlobalNamespace) { PopIndent(); #>
}
<# } #>

<# if(!VisitorInterface.ContainingNamespace.IsGlobalNamespace) { #>
namespace <#= VisitorInterface.ContainingNamespace.ToDisplayString() #>
{
<# PushIndent("    "); } #>
partial interface <#= VisitorInterface.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat.WithGenericsOptions(SymbolDisplayGenericsOptions.IncludeTypeParameters | SymbolDisplayGenericsOptions.IncludeVariance)) #>
{
<# foreach(var (acceptor, result) in AcceptorTypes) { #>
    <#= GetReturnType(IsGeneric ? BaseResultType : result ?? BaseResultType) #> Visit<#= IfAsync("Async") #>(<#= acceptor.ToDisplayString() #> value<#= GetTypeArgListStr() #>);
<# } #>
}
<# if(!VisitorInterface.ContainingNamespace.IsGlobalNamespace) { PopIndent(); #>
}
<# } #>
<# foreach(var (acceptor, result) in AcceptorTypes) { #>

<#   if(!VisitorInterface.ContainingNamespace.IsGlobalNamespace) { #>
namespace <#= acceptor.ContainingNamespace.ToDisplayString() #>
{
<#   PushIndent("    "); } #>
partial class <#= acceptor.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat.WithGenericsOptions(SymbolDisplayGenericsOptions.IncludeTypeParameters | SymbolDisplayGenericsOptions.IncludeVariance)) #>: <#= AcceptorInterface.ToDisplayString() #><#= BaseResultType is null || IsGeneric ? "" : $", {GetBaseInterfaceName("IVisitorResult")}<{(result ?? BaseResultType).ToDisplayString()}>" #>
{
    <#= IfAsync("async ") #><#= GetReturnType(BaseResultType) #> <#= AcceptorInterface.ToDisplayString() #>.Accept<#= IfAsync("Async") #><#= GetTypeParamStr() #>(<#= VisitorInterface.ToDisplayString() #> visitor<#= GetTypeArgListStr() #>) => <#= BaseResultType is null || result is null || IsGeneric ? "" : $"({BaseResultType.ToDisplayString()})" #><#= IfAsync("await ") #>visitor.Visit<#= IfAsync("Async") #>(this<#= GetArgListStr() #>);
}
<#   if(!AcceptorInterface.ContainingNamespace.IsGlobalNamespace) { PopIndent(); #>
}
<#   } #>
<# } #>
