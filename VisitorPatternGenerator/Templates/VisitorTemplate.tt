<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
// <auto-generated/>

<# if (!Acceptor.ContainingNamespace.IsGlobalNamespace) { #>
namespace <#= GetNamespace(Acceptor) #>
{
<# PushIndent("    "); } #>
partial <#= Acceptor.TypeKind == TypeKind.Interface ? "interface" : "class" #> <#= GetTypeIdentifier(Acceptor) #>
{
    <#= Acceptor.TypeKind == TypeKind.Interface ? "" : "public abstract " #><#= GetReturnType(BaseResult) #> Accept<#= IfAsync("Async") #><#= GetTypeParamStr() #>(<#= VisitorInterface.ToDisplayString() #> visitor<#= GetTypeArgListStr() #>)<#= GetTypeConstraintList() #>;
}
<# if (!Acceptor.ContainingNamespace.IsGlobalNamespace) { PopIndent(); #>
}
<# } #>

<# if (!VisitorInterface.ContainingNamespace.IsGlobalNamespace) { #>
namespace <#= GetNamespace(VisitorInterface) #>
{
<# PushIndent("    "); } #>
partial interface <#= GetTypeIdentifier(VisitorInterface) #>
{
<# foreach(var (acceptor, result) in Acceptors) { #>
    <#= GetReturnType(IsGeneric ? BaseResult : result ?? BaseResult) #> Visit<#= IfAsync("Async") #>(<#= acceptor.ToDisplayString() #> value<#= GetTypeArgListStr() #>);
<# } #>
}
<# if (!VisitorInterface.ContainingNamespace.IsGlobalNamespace) { PopIndent(); #>
}
<# } #>
<# foreach(var (acceptor, result) in Acceptors) { #>

<#   if (!acceptor.ContainingNamespace.IsGlobalNamespace) { #>
namespace <#= GetNamespace(acceptor) #>
{
<#   PushIndent("    "); } #>
partial class <#= GetTypeIdentifier(acceptor) #>: <#= Acceptor.ToDisplayString() #><#= BaseResult is null || IsGeneric ? "" : $", {GetBaseInterfaceName("IVisitorResult")}<{(result ?? BaseResult).ToDisplayString()}>" #>
{
    <#= Acceptor.TypeKind == TypeKind.Interface ? "" : "public sealed override " #><#= IfAsync("async ") #><#= GetReturnType(BaseResult) #> <#= Acceptor.TypeKind == TypeKind.Interface ? $"{Acceptor.ToDisplayString()}." : "" #>Accept<#= IfAsync("Async") #><#= GetTypeParamStr() #>(<#= VisitorInterface.ToDisplayString() #> visitor<#= GetTypeArgListStr() #>) => <#= BaseResult is null || result is null || IsGeneric ? "" : $"({BaseResult.ToDisplayString()})" #><#= IfAsync("await ") #>visitor.Visit<#= IfAsync("Async") #>(this<#= GetArgListStr() #>);
}
<#   if (!acceptor.ContainingNamespace.IsGlobalNamespace) { PopIndent(); #>
}
<#   } #>
<# } #>
